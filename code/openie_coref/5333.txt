0.8942434158739456		SimpleArgument(Mocklisp,List([0, 8)))	Relation(does not have,List([9, 22)))	SimpleArgument(any other structured datatypes,List([23, 53)))	"Gosling Emacs (often shortened to ""Gosmacs"" or ""gmacs"") is a discontinued Emacs implementation written in 1981 by James Gosling in C. Its extension language, Mocklisp, has a syntax that appears similar to Lisp, but Mocklisp does not have lists or any other structured datatypes."
0.8830698462028939		SimpleArgument(a discontinued Emacs implementation,List([3, 38)))	Relation(has,List([114, 117)))	SimpleArgument(a syntax that appears similar to Lisp,List([118, 155)))	"Gosling Emacs (often shortened to ""Gosmacs"" or ""gmacs"") is a discontinued Emacs implementation written in 1981 by James Gosling in C. Its extension language, Mocklisp, has a syntax that appears similar to Lisp, but Mocklisp does not have lists or any other structured datatypes."
0.8433169686710442	Context(Its extension language has,List([122, 161)))	SimpleArgument(Gosling Emacs,List([0, 13)))	"Relation(shortened to "" Gosmacs "" a discontinued Emacs implementation,List([22, 31), [32, 82)))"	TemporalArgument(often,List([16, 21)))	"Gosling Emacs (often shortened to ""Gosmacs"" or ""gmacs"") is a discontinued Emacs implementation written in 1981 by James Gosling in C. Its extension language, Mocklisp, has a syntax that appears similar to Lisp, but Mocklisp does not have lists or any other structured datatypes."
0.9113876755508152	Context(Its extension language has,List([122, 161)))	SimpleArgument(Gosling Emacs,List([0, 13)))	Relation(shortened to,List([22, 31), [32, 34)))	"SimpleArgument("" Gosmacs "" a discontinued Emacs implementation,List([35, 82)))"	"Gosling Emacs (often shortened to ""Gosmacs"" or ""gmacs"") is a discontinued Emacs implementation written in 1981 by James Gosling in C. Its extension language, Mocklisp, has a syntax that appears similar to Lisp, but Mocklisp does not have lists or any other structured datatypes."
0.4339186673784306		SimpleArgument(Its extension language,List([122, 144)))	Relation(has,List([158, 161)))	SimpleArgument(a syntax that appears similar to Lisp,List([162, 199)))	"Gosling Emacs (often shortened to ""Gosmacs"" or ""gmacs"") is a discontinued Emacs implementation written in 1981 by James Gosling in C. Its extension language, Mocklisp, has a syntax that appears similar to Lisp, but Mocklisp does not have lists or any other structured datatypes."
0.9232922754955963		SimpleArgument(a discontinued Emacs implementation,List([47, 82)))	Relation(written by,List([83, 90), [99, 101)))	SimpleArgument(James Gosling in C.,List([102, 121)))	"Gosling Emacs (often shortened to ""Gosmacs"" or ""gmacs"") is a discontinued Emacs implementation written in 1981 by James Gosling in C. Its extension language, Mocklisp, has a syntax that appears similar to Lisp, but Mocklisp does not have lists or any other structured datatypes."
0.8437742409533863		SimpleArgument(a discontinued Emacs implementation,List([47, 82)))	Relation(written in,List([83, 90), [91, 93)))	TemporalArgument(1981,List([94, 98)))	"Gosling Emacs (often shortened to ""Gosmacs"" or ""gmacs"") is a discontinued Emacs implementation written in 1981 by James Gosling in C. Its extension language, Mocklisp, has a syntax that appears similar to Lisp, but Mocklisp does not have lists or any other structured datatypes."
0.9045207649554154		SimpleArgument(a syntax,List([162, 170)))	Relation(appears,List([176, 183)))	SimpleArgument(similar to Lisp,List([184, 199)))	"Gosling Emacs (often shortened to ""Gosmacs"" or ""gmacs"") is a discontinued Emacs implementation written in 1981 by James Gosling in C. Its extension language, Mocklisp, has a syntax that appears similar to Lisp, but Mocklisp does not have lists or any other structured datatypes."
0.8592111619294878		SimpleArgument(James Gosling in C.,List([0, 7)))	Relation(sold it,List([14, 18), [19, 21)))	TemporalArgument(later,List([8, 13)))	Gosling initially allowed Gosling Emacs to be redistributed with no formal restrictions, but later sold it to UniPress.[citation
0.9210233335200773		SimpleArgument(James Gosling in C.,List([0, 7)))	Relation(sold it to,List([14, 18), [19, 21), [22, 24)))	SimpleArgument(UniPress,List([25, 33)))	Gosling initially allowed Gosling Emacs to be redistributed with no formal restrictions, but later sold it to UniPress.[citation
0.8746736694634364		SimpleArgument(James Gosling in C.,List([0, 7)))	Relation(sold,List([14, 18)))	SimpleArgument(Gosling Emacs,List([19, 21)))	Gosling initially allowed Gosling Emacs to be redistributed with no formal restrictions, but later sold it to UniPress.[citation
0.3287129514285735		SimpleArgument(James Gosling in C.,List([0, 7)))	Relation(allowed Gosling Emacs to be redistributed with no formal restrictions,List([18, 25), [26, 87)))	TemporalArgument(initially,List([8, 17)))	Gosling initially allowed Gosling Emacs to be redistributed with no formal restrictions, but later sold it to UniPress.[citation
0.43745211026240943		SimpleArgument(James Gosling in C.,List([0, 7)))	Relation(allowed,List([18, 25)))	SimpleArgument(Gosling Emacs to be redistributed with no formal restrictions,List([26, 87)))	Gosling initially allowed Gosling Emacs to be redistributed with no formal restrictions, but later sold it to UniPress.[citation
0.9534204611953943		SimpleArgument(according to whom?] redisplay code,List([93, 127)))	Relation(used a dynamic programming technique to,List([135, 139), [140, 171), [172, 174)))	SimpleArgument(solve the classical string-to-string correction problem,List([175, 230)))	needed] Gosling Emacs was especially noteworthy[according to whom?] because of the effective[according to whom?] redisplay code, which used a dynamic programming technique to solve the classical string-to-string correction problem.[citation
0.9273436369335116		SimpleArgument(according to whom?] redisplay code,List([93, 127)))	Relation(used,List([135, 139)))	SimpleArgument(a dynamic programming technique,List([140, 171)))	needed] Gosling Emacs was especially noteworthy[according to whom?] because of the effective[according to whom?] redisplay code, which used a dynamic programming technique to solve the classical string-to-string correction problem.[citation
0.8552025907515035		SimpleArgument(Gosling Emacs,List([8, 21)))	Relation(was,List([22, 25)))	SimpleArgument(especially noteworthy,List([26, 47)))	needed] Gosling Emacs was especially noteworthy[according to whom?] because of the effective[according to whom?] redisplay code, which used a dynamic programming technique to solve the classical string-to-string correction problem.[citation
0.9227507695989512		SimpleArgument(that section of the source,List([49, 75)))	Relation(was headed by,List([76, 86), [87, 89)))	SimpleArgument(- crossbones in ASCII art,List([90, 115)))	needed] The algorithm was quite sophisticated; that section of the source was headed by a skull-and-crossbones in ASCII art, warning would-be improver that even if they thought they understood how the display code worked, they probably did not.
0.9084825299398116		SimpleArgument(that section of the source,List([49, 75)))	Relation(was headed by,List([76, 86), [87, 89)))	SimpleArgument(a skull,List([90, 97)))	needed] The algorithm was quite sophisticated; that section of the source was headed by a skull-and-crossbones in ASCII art, warning would-be improver that even if they thought they understood how the display code worked, they probably did not.
0.9382554258342916		SimpleArgument(Richard Stallman,List([61, 77)))	Relation(used some Gosling Emacs code in,List([78, 82), [83, 106), [107, 109)))	SimpleArgument(the initial version of GNU Emacs,List([110, 142)))	Since Gosling had permitted its unrestricted redistribution, Richard Stallman used some Gosling Emacs code in the initial version of GNU Emacs.[citation
0.9382554258342916		SimpleArgument(Richard Stallman,List([61, 77)))	Relation(used,List([78, 82)))	SimpleArgument(some Gosling Emacs code,List([83, 106)))	Since Gosling had permitted its unrestricted redistribution, Richard Stallman used some Gosling Emacs code in the initial version of GNU Emacs.[citation
0.8615585111461579		SimpleArgument(James Gosling in C.,List([6, 13)))	Relation(had permitted,List([14, 27)))	SimpleArgument(its unrestricted redistribution,List([28, 59)))	Since Gosling had permitted its unrestricted redistribution, Richard Stallman used some Gosling Emacs code in the initial version of GNU Emacs.[citation
0.561196248470269		SimpleArgument(needed ] Among other things,List([0, 27)))	Relation(made,List([28, 32)))	"SimpleArgument(it "" ... shorter , faster,List([33, 58)))"	"needed] Among other things, he rewrote part of the Gosling code headed by the skull-and-crossbones comment and made it ""...shorter, faster, clearer and more flexible."""
0.9329286852051247		SimpleArgument(the Gosling code,List([49, 65)))	Relation(headed by,List([66, 72), [73, 75)))	SimpleArgument(the skull - crossbones comment,List([76, 106)))	"needed] Among other things, he rewrote part of the Gosling code headed by the skull-and-crossbones comment and made it ""...shorter, faster, clearer and more flexible."""
0.9329286852051247		SimpleArgument(the Gosling code,List([49, 65)))	Relation(headed by,List([66, 72), [73, 75)))	SimpleArgument(the skull - comment,List([76, 95)))	"needed] Among other things, he rewrote part of the Gosling code headed by the skull-and-crossbones comment and made it ""...shorter, faster, clearer and more flexible."""
0.4978219019954182		SimpleArgument(Richard Stallman,List([30, 32)))	Relation(rewrote,List([33, 40)))	SimpleArgument(part of the Gosling code,List([41, 65)))	"needed] Among other things, he rewrote part of the Gosling code headed by the skull-and-crossbones comment and made it ""...shorter, faster, clearer and more flexible."""
0.9169884650944797	Context(Stallman to stop,List([24, 40)))	SimpleArgument(Richard Stallman,List([24, 32)))	Relation(to stop distributing,List([33, 40), [41, 53)))	SimpleArgument(Gosling Emacs source code,List([54, 79)))	UniPress began selling Gosling Emacs (which it renamed Unipress Emacs) as a proprietary product in 1983,[citation needed] and controversially, asked Stallman to stop distributing Gosling Emacs source code.
0.9169884650944797		SimpleArgument(Richard Stallman,List([24, 32)))	Relation(to stop,List([33, 40)))	SimpleArgument(distributing Gosling Emacs source code,List([41, 79)))	UniPress began selling Gosling Emacs (which it renamed Unipress Emacs) as a proprietary product in 1983,[citation needed] and controversially, asked Stallman to stop distributing Gosling Emacs source code.
0.852130044887511	Context(UniPress began,List([0, 14)))	SimpleArgument(UniPress,List([0, 8)))	Relation(began selling Gosling Emacs as,List([9, 14), [15, 22), [23, 36), [73, 75)))	SimpleArgument(a proprietary product,List([76, 97)))	UniPress began selling Gosling Emacs (which it renamed Unipress Emacs) as a proprietary product in 1983,[citation needed] and controversially, asked Stallman to stop distributing Gosling Emacs source code.
0.9139478779591064	Context(UniPress began,List([0, 14)))	SimpleArgument(UniPress,List([0, 8)))	Relation(began selling,List([9, 14), [15, 22)))	SimpleArgument(Gosling Emacs,List([23, 36)))	UniPress began selling Gosling Emacs (which it renamed Unipress Emacs) as a proprietary product in 1983,[citation needed] and controversially, asked Stallman to stop distributing Gosling Emacs source code.
0.7567828703482674		SimpleArgument(UniPress,List([0, 8)))	Relation(began selling Gosling Emacs ( which it renamed Unipress Emacs ) as a proprietary product in,List([9, 14), [15, 97), [98, 100)))	TemporalArgument(1983,List([101, 105)))	UniPress began selling Gosling Emacs (which it renamed Unipress Emacs) as a proprietary product in 1983,[citation needed] and controversially, asked Stallman to stop distributing Gosling Emacs source code.
0.9023946766454398		SimpleArgument(UniPress,List([0, 8)))	Relation(began,List([9, 14)))	SimpleArgument(selling Gosling Emacs ( which it renamed Unipress Emacs ) as a proprietary product,List([15, 97)))	UniPress began selling Gosling Emacs (which it renamed Unipress Emacs) as a proprietary product in 1983,[citation needed] and controversially, asked Stallman to stop distributing Gosling Emacs source code.
0.9118950725318941		SimpleArgument(Gosling Emacs,List([23, 36)))	Relation(renamed,List([48, 55)))	SimpleArgument(UniPress,List([45, 47)))	UniPress began selling Gosling Emacs (which it renamed Unipress Emacs) as a proprietary product in 1983,[citation needed] and controversially, asked Stallman to stop distributing Gosling Emacs source code.
0.8902982953122027	Context(citation needed believing,List([82, 109)))	SimpleArgument(academics,List([110, 119)))	Relation(could never produce,List([120, 139)))	SimpleArgument(an Emacs,List([140, 148)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.841236037251329	Context(citation needed,List([82, 97)))	SimpleArgument(citation,List([82, 90)))	Relation(needed believing,List([91, 97), [100, 109)))	SimpleArgument(academics could never produce an Emacs,List([110, 148)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.8902982953122027	Context(citation needed believing,List([82, 109)))	SimpleArgument(hobbyists,List([112, 121)))	Relation(could never produce,List([122, 141)))	SimpleArgument(an Emacs,List([142, 150)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.8153738575482335	Context(citation needed,List([82, 97)))	SimpleArgument(citation,List([82, 90)))	Relation(needed believing,List([91, 97), [100, 109)))	SimpleArgument(hobbyists could never produce an Emacs,List([112, 150)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.8821938819052391		SimpleArgument(UniPress,List([0, 8)))	Relation(never took,List([9, 19)))	SimpleArgument(legal action against his nascent Free Software Foundation,List([20, 77)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.8902982953122027	Context(citation needed believing,List([54, 81)))	SimpleArgument(academics,List([82, 91)))	Relation(could never produce,List([92, 111)))	SimpleArgument(an Emacs,List([112, 120)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.841236037251329	Context(citation needed,List([54, 69)))	SimpleArgument(citation,List([54, 62)))	Relation(needed believing,List([63, 69), [72, 81)))	SimpleArgument(academics could never produce an Emacs,List([82, 120)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.8902982953122027	Context(citation needed believing,List([54, 81)))	SimpleArgument(hobbyists,List([84, 93)))	Relation(could never produce,List([94, 113)))	SimpleArgument(an Emacs,List([114, 122)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.8153738575482335	Context(citation needed,List([54, 69)))	SimpleArgument(citation,List([54, 62)))	Relation(needed believing,List([63, 69), [72, 81)))	SimpleArgument(hobbyists could never produce an Emacs,List([84, 122)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.7909298299575616		SimpleArgument(an Emacs,List([114, 122)))	Relation(could compete with,List([128, 141), [144, 148)))	SimpleArgument(their product,List([149, 162)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
0.9324144673478683		SimpleArgument(UniPress,List([0, 8)))	Relation(never took,List([9, 19)))	SimpleArgument(legal action against Stallman,List([20, 49)))	"UniPress never took legal action against Stallman or his nascent Free Software Foundation,[citation needed] believing ""hobbyists and academics could never produce an Emacs that could compete"" with their product.[citation"
