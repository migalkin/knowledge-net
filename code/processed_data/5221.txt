0.8001746144394993		SimpleArgument(a pioneering programming language,List([7, 40)))	Relation(created by,List([41, 48), [56, 58)))	SimpleArgument(her students between 1975,List([59, 84)))	CLU is a pioneering programming language created at MIT by Barbara Liskov and her students between 1974 and 1975.
0.8912990774927839		SimpleArgument(CLU,List([0, 3)))	Relation(is,List([4, 6)))	SimpleArgument(a pioneering programming language created at MIT by her students between 1975,List([7, 84)))	CLU is a pioneering programming language created at MIT by Barbara Liskov and her students between 1974 and 1975.
0.8001746144394993		SimpleArgument(a pioneering programming language,List([7, 40)))	Relation(created by,List([41, 48), [56, 58)))	SimpleArgument(her students between 1974,List([59, 84)))	CLU is a pioneering programming language created at MIT by Barbara Liskov and her students between 1974 and 1975.
0.8912990774927839		SimpleArgument(CLU,List([0, 3)))	Relation(is,List([4, 6)))	SimpleArgument(a pioneering programming language created at MIT by her students between 1974,List([7, 84)))	CLU is a pioneering programming language created at MIT by Barbara Liskov and her students between 1974 and 1975.
0.8987556540308702		SimpleArgument(a pioneering programming language,List([7, 40)))	Relation(created by,List([41, 48), [56, 58)))	SimpleArgument(Barbara Liskov,List([59, 73)))	CLU is a pioneering programming language created at MIT by Barbara Liskov and her students between 1974 and 1975.
0.9314904193639496		SimpleArgument(a pioneering programming language,List([7, 40)))	Relation(created at,List([41, 48), [49, 51)))	SpatialArgument(MIT,List([52, 55)))	CLU is a pioneering programming language created at MIT by Barbara Liskov and her students between 1974 and 1975.
0.9379113123569551		SimpleArgument(CLU,List([0, 3)))	Relation(is,List([4, 6)))	SimpleArgument(a pioneering programming language created at MIT by Barbara Liskov,List([7, 73)))	CLU is a pioneering programming language created at MIT by Barbara Liskov and her students between 1974 and 1975.
0.5691839633287576		SimpleArgument(it,List([6, 8)))	Relation(is seen as,List([9, 16), [17, 19)))	SimpleArgument(a step in the development of object - oriented programming,List([20, 78)))	While it did not find extensive use itself, it introduced many features that are now widely used, and is seen as a step in the development of object-oriented programming (OOP).
0.8321465232489272		SimpleArgument(many features,List([59, 72)))	Relation(widely used,List([86, 97)))	TemporalArgument(now,List([82, 85)))	While it did not find extensive use itself, it introduced many features that are now widely used, and is seen as a step in the development of object-oriented programming (OOP).
0.6981825038137658		SimpleArgument(many features,List([59, 72)))	Relation(are,List([78, 81)))	SimpleArgument(widely used,List([86, 97)))	While it did not find extensive use itself, it introduced many features that are now widely used, and is seen as a step in the development of object-oriented programming (OOP).
0.729569447694811		SimpleArgument(many features,List([59, 72)))	Relation(are widely used,List([78, 81), [86, 97)))	TemporalArgument(now,List([82, 85)))	While it did not find extensive use itself, it introduced many features that are now widely used, and is seen as a step in the development of object-oriented programming (OOP).
0.23131915735944072		SimpleArgument(it,List([45, 47)))	Relation(introduced,List([48, 58)))	SimpleArgument(many features that are now widely used,List([59, 97)))	While it did not find extensive use itself, it introduced many features that are now widely used, and is seen as a step in the development of object-oriented programming (OOP).
0.45170382506656653		SimpleArgument(it,List([6, 8)))	Relation(did not find,List([9, 21)))	SimpleArgument(extensive use,List([22, 35)))	While it did not find extensive use itself, it introduced many features that are now widely used, and is seen as a step in the development of object-oriented programming (OOP).
0.4978219019954182		SimpleArgument(it,List([87, 89)))	Relation(lacked,List([90, 96)))	SimpleArgument(many features of OOP,List([97, 117)))	However, it is not object-oriented itself, instead being considered "object-based", as it lacked many features of OOP.
0.30899953469486874		SimpleArgument(it,List([9, 11)))	Relation(is not object - oriented,List([12, 18), [19, 34)))	SimpleArgument(itself,List([35, 41)))	However, it is not object-oriented itself, instead being considered "object-based", as it lacked many features of OOP.
0.45170382506656653		SimpleArgument(it,List([9, 11)))	Relation(is not,List([12, 18)))	SimpleArgument(object-oriented,List([19, 34)))	However, it is not object-oriented itself, instead being considered "object-based", as it lacked many features of OOP.
0.9372494423173455		SimpleArgument(Key contributions,List([0, 17)))	Relation(include,List([18, 25)))	SimpleArgument(abstract data types , call - by type - safe variant types,List([26, 83)))	Key contributions include abstract data types, call-by-sharing, iterators, multiple return values (a form of parallel assignment), type-safe parameterized types, and type-safe variant types.
0.9372494423173455		SimpleArgument(Key contributions,List([0, 17)))	Relation(include,List([18, 25)))	SimpleArgument(abstract data types , call - by , type - safe parameterized types,List([26, 91)))	Key contributions include abstract data types, call-by-sharing, iterators, multiple return values (a form of parallel assignment), type-safe parameterized types, and type-safe variant types.
0.9030401971054747		SimpleArgument(Key contributions,List([0, 17)))	Relation(include,List([18, 25)))	SimpleArgument(abstract data types , call,List([26, 52)))	Key contributions include abstract data types, call-by-sharing, iterators, multiple return values (a form of parallel assignment), type-safe parameterized types, and type-safe variant types.
0.9030401971054747		SimpleArgument(Key contributions,List([0, 17)))	Relation(include,List([18, 25)))	SimpleArgument(abstract data types , call - by iterators,List([26, 67)))	Key contributions include abstract data types, call-by-sharing, iterators, multiple return values (a form of parallel assignment), type-safe parameterized types, and type-safe variant types.
0.9030401971054747		SimpleArgument(Key contributions,List([0, 17)))	Relation(include,List([18, 25)))	SimpleArgument(abstract data types , call - by - sharing,List([26, 67)))	Key contributions include abstract data types, call-by-sharing, iterators, multiple return values (a form of parallel assignment), type-safe parameterized types, and type-safe variant types.
0.22506131975927415		SimpleArgument(It,List([0, 2)))	Relation(is also,List([3, 10)))	SimpleArgument(notable,List([11, 18)))	It is also notable for its use of classes with constructors and methods, but without inheritance.
