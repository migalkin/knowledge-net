0.9393374645731517		SimpleArgument(a general - purpose , imperative computer programming language,List([40, 102)))	Relation(supporting,List([105, 115)))	SimpleArgument(recursion,List([116, 125)))	C (/ˈsiː/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations.
0.8867028083740182		SimpleArgument(C,List({0}))	Relation(is,List([37, 39)))	SimpleArgument(a general - purpose , imperative computer programming language , supporting recursion,List([40, 125)))	C (/ˈsiː/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations.
0.9393374645731517		SimpleArgument(a general - purpose , imperative computer programming language,List([40, 102)))	Relation(supporting,List([105, 115)))	SimpleArgument(lexical variable scope,List([116, 138)))	C (/ˈsiː/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations.
0.8867028083740182		SimpleArgument(C,List({0}))	Relation(is,List([37, 39)))	SimpleArgument(a general - purpose , imperative computer programming language , supporting lexical variable scope,List([40, 138)))	C (/ˈsiː/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations.
0.9186941924198344		SimpleArgument(a static type system,List([147, 167)))	Relation(prevents,List([168, 176)))	SimpleArgument(many unintended operations,List([177, 203)))	C (/ˈsiː/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations.
0.9393374645731517		SimpleArgument(a general - purpose , imperative computer programming language,List([40, 102)))	Relation(supporting,List([105, 115)))	SimpleArgument(structured programming,List([116, 138)))	C (/ˈsiː/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations.
0.8867028083740182		SimpleArgument(C,List({0}))	Relation(is,List([37, 39)))	SimpleArgument(a general - purpose , imperative computer programming language , supporting structured programming,List([40, 138)))	C (/ˈsiː/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations.
0.8466416222141189		SimpleArgument(computers,List([146, 155)))	Relation(ranging to,List([156, 163), [184, 186)))	SimpleArgument(embedded systems,List([187, 203)))	By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.
0.8942434158739456		SimpleArgument(computers,List([146, 155)))	Relation(ranging from,List([156, 163), [164, 168)))	SimpleArgument(supercomputers,List([169, 183)))	By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.
0.8235300475714378		SimpleArgument(applications,List([38, 50)))	Relation(had been coded in,List([56, 59), [69, 79), [80, 82)))	SpatialArgument(assembly language,List([83, 100)))	By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.
0.3255094774798389		SimpleArgument(it,List([10, 12)))	Relation(has found,List([13, 22)))	SimpleArgument(lasting use in applications that had formerly been coded in assembly language , including various application software for computers,List([23, 155)))	By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.
0.7100869950053089		SimpleArgument(applications,List([38, 50)))	Relation(had been coded,List([56, 59), [69, 79)))	TemporalArgument(formerly,List([60, 68)))	By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.
0.45170382506656653		SimpleArgument(it,List([10, 12)))	Relation(has found,List([13, 22)))	SimpleArgument(lasting use in applications,List([23, 50)))	By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.
0.677436272538318		SimpleArgument(constructs,List([23, 33)))	Relation(map efficiently,List([39, 54)))		By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.
0.6830729213438076		SimpleArgument(C,List({12}))	Relation(provides,List([14, 22)))	SimpleArgument(constructs that map efficiently to typical machine instructions,List([23, 86)))	By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.
0.8157140564641437		SimpleArgument(C,List({0}))	Relation(to re-implement,List([11, 26)))	SimpleArgument(the Unix operating system,List([27, 52)))	C was originally developed by Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs, and used to re-implement the Unix operating system.
0.8396499491243721		SimpleArgument(C,List({0}))	Relation(was used to,List([2, 10), [11, 13)))	SimpleArgument(re-implement the Unix operating system,List([14, 52)))	C was originally developed by Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs, and used to re-implement the Unix operating system.
0.5985840066184043		SimpleArgument(C,List({0}))	Relation(was developed,List([2, 5), [17, 26)))	TemporalArgument(originally,List([6, 16)))	C was originally developed by Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs, and used to re-implement the Unix operating system.
0.7736939098887301		SimpleArgument(C,List({0}))	Relation(was developed at,List([2, 5), [17, 26), [67, 69)))	SpatialArgument(AT&T Bell Labs,List([70, 84)))	C was originally developed by Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs, and used to re-implement the Unix operating system.
0.5003973265857395		SimpleArgument(C,List({0}))	Relation(was developed between,List([2, 5), [17, 26), [45, 52)))	TemporalArgument(1969 and 1973,List([53, 66)))	C was originally developed by Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs, and used to re-implement the Unix operating system.
0.7736939098887301		SimpleArgument(C,List({0}))	Relation(was developed by,List([2, 5), [17, 26), [27, 29)))	SimpleArgument(Dennis Ritchie,List([30, 44)))	C was originally developed by Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs, and used to re-implement the Unix operating system.
0.4631132767248821		SimpleArgument(It,List([0, 2)))	Relation(has become,List([3, 6), [13, 19)))	SimpleArgument(one of the most widely used programming languages of all time,List([20, 81)))	It has since become one of the most widely used programming languages of all time, with C compilers from various vendors available for the majority of existing computer architectures and operating systems.
0.5003973265857395		SimpleArgument(C,List({0}))	Relation(has been standardized since,List([2, 23), [76, 81)))	TemporalArgument(1989,List([82, 86)))	C has been standardized by the American National Standards Institute (ANSI) since 1989 (see ANSI C) and subsequently by the International Organization for Standardization (ISO).
0.8396499491243721		SimpleArgument(C,List({0}))	Relation(has been standardized by,List([2, 23), [24, 26)))	SimpleArgument(the American National Standards Institute,List([27, 68)))	C has been standardized by the American National Standards Institute (ANSI) since 1989 (see ANSI C) and subsequently by the International Organization for Standardization (ISO).
